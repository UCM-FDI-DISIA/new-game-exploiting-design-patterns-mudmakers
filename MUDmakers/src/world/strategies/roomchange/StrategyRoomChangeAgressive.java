package world.strategies.roomchange;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;
import world.CombatManager;
import world.Mobile;
import world.Movable;
import world.Player;
import world.Room;
import world.World;
import world.strategies.StrategyOnRoomChange;


public class StrategyRoomChangeAgressive extends StrategyOnRoomChange {

	/**
	 * 
	 */
	private static final long serialVersionUID = 4985727352969184064L;
	Player player;
	Mobile mySelf;
	Mobile toAttack;

	public StrategyRoomChangeAgressive() {
		// TODO Auto-generated constructor stub
	}
	
	public StrategyRoomChangeAgressive(Player player) {
		this.player = player;
	}

	@Override
	public void onRoomChange(Mobile mob) {
		mySelf = mob;
		Room room = (Room) World.getInstance().getDatabaseObject(
				mySelf.getRoomId());
		room.remove(mySelf.getName());
		room.add(mySelf);
		mySelf.setLocation(room);

		((Room) mySelf.getLocation()).refreshPlayers();
		((Room) mySelf.getLocation()).refreshMobiles();

		 for (Movable mobile : room.listMovables()) {
			 if (mobile instanceof Mobile) 
				 if (!mobile.equals(mySelf))
					 toAttack = (Mobile) mobile;
		 }
		 
		((Room) mob.getLocation()).sendToRoom(mob.getName()
				+ " moves into attack position..");
		Timer attackTimer = new Timer(10000, new AttackTimerListener());
		attackTimer.setRepeats(false);
		attackTimer.start();

	}
	
	public class AttackTimerListener implements ActionListener {

		public void actionPerformed(ActionEvent arg0) {
			System.out.println(mySelf + " " + toAttack + " "
					+ mySelf.getRoomId() + " " + toAttack.getRoomId());
			if (mySelf == null || toAttack == null) {

			} else if (mySelf.getRoomId() == toAttack.getRoomId()) {
				@SuppressWarnings("unused")
				CombatManager attackStart = new CombatManager(toAttack, mySelf);
			}
		}
	}

	@Override
	public StrategyOnRoomChange cloneStrategy() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void onRoomChange() {
		// TODO Auto-generated method stub
		
	}

}
